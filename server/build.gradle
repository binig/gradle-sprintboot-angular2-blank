import org.apache.tools.ant.taskdefs.condition.Os

ext.appName = 'example'

buildscript {
    ext {
        springBootVersion = '1.3.3.RELEASE'
    }
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'war'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'

jar {
    baseName = '${appName}'
    version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}


dependencies {
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile 'org.springframework.boot:spring-boot-starter-velocity:1.3.3.RELEASE'
    compile 'com.h2database:h2:1.4.+'
    compile 'org.postgresql:postgresql:9.4.1208'
    compile 'org.springframework.security:spring-security-config:4.0.4.RELEASE'
    compile 'org.springframework.security:spring-security-web:4.0.4.RELEASE'
    compile 'org.springframework.security:spring-security-core:4.0.4.RELEASE'
    compile 'oauth.signpost:signpost-core:1.2.1.2'
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.7.3'
    compile 'org.springframework.security.oauth:spring-security-oauth:2.0.9.RELEASE'
    compile 'com.google.code.gson:gson:2.6.2'
    compile 'org.apache.velocity:velocity:1.7'

    testCompile 'org.testng:testng:6.9.8'
    testCompile "org.mockito:mockito-core:1.+"
    testCompile('org.springframework.boot:spring-boot-starter-test')
}


eclipse {
    classpath {
        containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
        containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}
test {
    useTestNG {

    }
    scanForTestClasses = false
}
task wrapper(type: Wrapper) {
    gradleVersion = '2.12'
}

task stage {
    dependsOn build
}
war {
    into("WEB-INF/classes/static/") {
        from rootProject.webjsDist
    }
    archiveName "${appName}.war"
}
war.dependsOn(":webjs:build")

task initConf() {
    if (!new File(parent.projectDir,'.env').exists())
        copy {
            from("../")
            into("../")
            include(".env.example")
            rename ('.env.example', '.env')

        }
}

task serve(type: Exec, dependsOn: ["build","initConf"]) {
    group = BasePlugin.BUILD_GROUP
    workingDir projectDir
    executable = new   File(projectDir, Os.isFamily(Os.FAMILY_WINDOWS) ? "serve.bat":"serve.sh")
    def warFile = new File(projectDir, "build/libs/${appName}.war")
    def envFile = new File(parent.projectDir, '.env')
    args = [warFile, envFile]
    description = "start spring boot application"
}

